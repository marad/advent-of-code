import aoc/lib as lib { load, splitOnNewLines }
import aoc/direction { Direction, Up, Down, Left, Right }
import aoc/point { Point }
import aoc/tilemap as tilemap { TileMap }
import aoc/input { Input }
import std/string as str
import std/math as math
import std/collections.map as map { Map, newMap }
import std/collections.set as set { Set, newSet }
import std/collections.arraylist as list { ArrayList, newArrayList }
import std/collections.queue.filo as filo { FiloQueue }
import std/collections.queue.priority as pqueue { PriorityQueue, newPriorityQueue }
import std/lang.unsafe { array as unsafeArray }
import std/lang.interop as iop

val maxInt = 9223372036854775807

val prod = load("aoc-23/input18.txt").trim()
val test = load("aoc-23/test18.txt").trim()

val plines = prod.splitOnNewLines()
val tlines = test.splitOnNewLines()

val tinput = Input(tlines)
val pinput = Input(plines)

data Instr(dir: Direction, len: int)

fn parseInstr1(line: string): Instr {
    val tmp = line.split(" ")
    val dir = when {
        (tmp[0] == "U") -> Up
        (tmp[0] == "D") -> Down
        (tmp[0] == "L") -> Left
        (tmp[0] == "R") -> Right
        else -> Up
    }
    var len = tmp[1] as int
    Instr(dir, len)
}

fn parseHexString(hex: string): int {
    val Long = iop.lookupHostSymbol("java.lang.Integer")
    var args = arrayOf[any](hex)
    iop.invokeMember(Long, "decode", args) as int
}

fn parseInstr2(line: string): Instr {
    val tmp = line.split(" ")[2]
    val len = tmp.substring(1, tmp.length()-3)
    val dirI = tmp[tmp.length()-2] as int
    val dir = when {
        (dirI == 0) -> Right
        (dirI == 1) -> Down
        (dirI == 2) -> Left
        (dirI == 3) -> Up
        else -> Up
    }

    Instr(dir, parseHexString(len))
}

// Calculates polygon area when points are in CW or CCW order
fn shoelace(points: ArrayList[Point]): int {
    var j = points.size() - 1
    var i = 0
    var area = 0
    while (i < points.size()) {
        val pi = points.unsafeGet(i)
        val pj = points.unsafeGet(j)
        area += (pj.x + pi.x) * (pj.y - pi.y)
        j = i
        i += 1
    }
    math.abs(area / 2)
}

fn part1(lines: array[string], parse: (string) -> Instr): int {
    var currentPos = Point(0, 0)
    val outline = newArrayList[Point]()
    var borderLen = 0

    lines.forEach({ line:string -> 
        val instr = parse(line)
        currentPos = currentPos.apply(instr.dir, instr.len)
        outline.add(currentPos)
        borderLen += instr.len
    })

    var area = shoelace(outline)
    area += (borderLen / 2) + 1
    area
}


println("Part 1 (test): ${part1(tlines, parseInstr1)}")
println("Part 1 (prod): ${part1(plines, parseInstr1)}")

fn part2(lines: array[string]): int {
    0
}

println("Part 2 (test): ${part1(tlines, parseInstr2)}")
println("Part 2 (prod): ${part1(plines, parseInstr2)}")
0
