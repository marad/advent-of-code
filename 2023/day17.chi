import aoc/lib as lib { load, splitOnNewLines }
import aoc/direction { Direction, Up, Down, Left, Right, None }
import aoc/point { Point }
import aoc/tilemap as tilemap { TileMap }
import aoc/input { Input }
import std/string as str
import std/math as math
import std/collections.map as map { Map, newMap }
import std/collections.set as set { Set, newSet }
import std/collections.arraylist as list { ArrayList, newArrayList }
import std/collections.queue.filo as filo { FiloQueue }
import std/collections.queue.priority as pqueue { PriorityQueue, newPriorityQueue }
import std/lang.unsafe { array as unsafeArray }

val maxInt = 9223372036854775807

val prod = load("aoc-23/input17.txt").trim()
val test = load("aoc-23/test17.txt").trim()

val plines = prod.splitOnNewLines()
val tlines = test.splitOnNewLines()

data Node(pos: Point, moveDir: Direction, streak: int, dist: int)

fn id(v: Node): string { "${v.pos},${v.moveDir},${v.streak}" }

fn solve(lines: array[string], min: int, max: int): int {
    val tm = Input(lines).toIntTileMap()
    val goal = Point(tm.width-1, tm.height-1)
    val compareNodes = { a: Node, b: Node -> 
        b.dist - a.dist
    }

    val pq = newPriorityQueue[Node](compareNodes)
    val visited = setOf[string]()

    pq.insert(Node(Point(0, 0), None, 0, 0))

    val dirs = arrayOf(Up, Down, Left, Right)

    var result = -1

    while (pq.size() > 0) {
        val v = pq.pop()
        val id = v.id()

        if (v.pos == goal && v.streak >= min) {
            result = v.dist
            break
        }

        if (visited.contains(id)) {
            continue
        }
        visited.add(id)

        if (v.streak < max && v.moveDir != None) {
            val nextInLine = v.pos.apply(v.moveDir)
            if (tm.contains(nextInLine)) {
                val nextDist = tm.get(nextInLine) + v.dist
                pq.insert(Node(nextInLine, v.moveDir, v.streak + 1, nextDist))
            }
        }

        if (v.streak >= min || v.moveDir == None) {
            dirs.forEach({ dir: Direction -> 
                val neigh = v.pos.apply(dir)

                if (dir != v.moveDir && dir != v.moveDir.oposite() && tm.contains(neigh)) {
                    val nextDist = tm.get(neigh) + v.dist
                    val node = Node(neigh, dir, 1, nextDist)
                    pq.insert(node)
                }
            })
        }

    }
    result
}

fn part1(lines: array[string]): int {
    solve(lines, 0, 3)
}

println("Part 1 (test): ${part1(tlines)}")
println("Part 1 (prod): ${part1(plines)}")

fn part2(lines: array[string]): int {
    solve(lines, 4, 10)
}

println("Part 2 (test): ${part2(tlines)}")
println("Part 2 (prod): ${part2(plines)}")
0

