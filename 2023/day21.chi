import aoc/lib as lib { load, splitOnNewLines }
import aoc/direction { Direction, Up, Down, Left, Right }
import aoc/point { Point }
import aoc/tilemap as tilemap { TileMap }
import aoc/input { Input }
import std/string as str
import std/math as math
import std/collections.map as map { Map, newMap }
import std/collections.set as set { Set, newSet }
import std/collections.arraylist as list { ArrayList, newArrayList }
import std/collections.list.linked { LinkedList, newLinkedList }
import std/collections.queue.filo as filo { FiloQueue }
import std/collections.queue.priority as pqueue { PriorityQueue, newPriorityQueue }
import std/lang.unsafe { array as unsafeArray }
import std/lang.interop as iop

val maxInt = 9223372036854775807

val prod = load("aoc-23/input21.txt").trim()
val test = load("aoc-23/test21.txt").trim()

val plines = prod.splitOnNewLines()
val tlines = test.splitOnNewLines()

val tinput = Input(tlines)
val pinput = Input(plines)

data Node(p: Point, step: int)



fn part1(lines: array[string], maxSteps: int): int {

    val input = Input(lines)
    val tm = input.toTileMap()
    tm.infinite = true
    var start = Point(0,0)


    // TODO: zrób "find" zwracający pozycję
    tm.forEachTDLR({ it: Point -> 
        if (tm.get(it) == "S") {
            start = it
        }


    })

    tm.set(start, "O")
    var step = 0

    var current = setOf[int](start.encode())
    var next = setOf[int]()

    while (step < maxSteps) {
        tm.forEachTDLR({ pos: Point -> 
            if (tm.get(pos) == "O") {
                tm.set(pos, "-")
                val neighs = arrayOf(pos.up(), pos.down(), pos.left(), pos.right())
                var i = 0
                while (i < neighs.size()) {
                    val neigh = neighs[i]
                    if (tm.contains(neigh) && tm.get(neigh) == ".") {
                        tm.set(neigh, "+")
                    }
                    i += 1
                }
            }
        })
        tm.forEachTDLR({ pos: Point -> 
            if (tm.get(pos) == "-") {
                tm.set(pos, ".")
            }
            if (tm.get(pos) == "+") {
                tm.set(pos, "O")
            }
        })
        step += 1
    }

    var plots = 0
    tm.forEachTDLR({ pos: Point -> if (tm.get(pos) == "O") {plots += 1} })
    plots
}

// println("Part 1 (test): ${part1(tlines, 6)}")
// println("Part 1 (prod): ${part1(plines, 64)}")

fn encode(p: Point): int {
    p.x << 32 | p.y
}

fn decode(p: int): Point {
    val x = p >> 32
    val y = (p << 32) >> 32
    Point(x,y)
}


fn part2(lines: array[string], maxSteps: int): int {
    val input = Input(lines)
    val tm = input.toTileMap()
    tm.infinite = true

    var start = Point(0,0)
    tm.forEachTDLR({ it: Point -> 
        if (tm.get(it) == "S") {
            start = it
        }
    })
    tm.set(start, ".")

    var current = setOf[Point](start)
    var next = setOf[Point]()

    var step = 0
    while (step < maxSteps) {
        step += 1


        val iter = current.iterator()
        while (iter.hasNext()) {
            val p = iter.next()
            arrayOf(p.up(), p.down(), p.left(), p.right()).forEach({ neigh: Point -> 
                if (tm.get(neigh) == ".") {
                    next.add(neigh)
                }
            })
        }

        current = next 
        next = setOf[Point]()
    }

    // val iter = current.iterator()
    // while (iter.hasNext()) {
    //     val p = iter.next()
    //     println(p)
    // }

    // tm.show("")

    // var y = 0 - tm.height
    // while (y < tm.height * 2) {
    //     var x = 0 - tm.width
    //     while (x < tm.width * 2) {
    //         if (current.contains(Point(x,y))) {
    //             print("O")
    //         } else {
    //             print(tm.get(x,y))
    //         }
    //         x += 1
    //     }
    //     println("")
    //     y += 1
    // }


    current.size()
}

// println("Part 2 (test): ${part2(tlines, 10)}")
// println("Part 2 (prod): ${part2(plines)}")


// The trick was to sample 3 values and use them and their results
// in the quadratic ax^2+bx+c to solve for a, b, and c. 

// Then it was a matter of calculating value for this function
// using the 'step count' as argument.


// Herea are samples:
// 65         -> 3943
// 65 + 131   -> 35126
// 65 + 131*2 -> 97407



0