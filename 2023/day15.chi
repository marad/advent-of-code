import aoc/lib as lib { load, splitOnNewLines }
import std/string as str
import std/math as math
import std/collections.map as map { Map, newMap }
import std/collections.set as set { Set, newSet }
import std/collections.arraylist as list { ArrayList, newArrayList }
import std/lang.unsafe { array as unsafeArray }


val prod = load("aoc-23/input15.txt").trim()
val test = load("aoc-23/test15.txt").trim()

val plines = prod.split(",")
val tlines = test.split(",")

fn hash(s: string): int {
    val codes = s.codePoints()
    var currentValue = 0
    var i = 0
    while (i < codes.size()) {
        val ch = codes[i]
        currentValue = ((currentValue + ch) * 17) % 256
        i += 1
    }
    currentValue
}


fn part1(lines: array[string]): int {
    lines.map(hash).sum()
}

println("Part 1 (test): ${part1(tlines)}")
println("Part 1 (prod): ${part1(plines)}")

fn find[T](l: ArrayList[T], predicate: (T) -> bool): int {
    var i = 0
    var result = -1
    while (i < l.size()) {
        if (predicate(l.unsafeGet(i))) {
            result = i
            break
        }
        i += 1
    }
    result
}

fn calcForBox(lines: array[string], boxNum: int): int {
    val box = newArrayList[string]()
    lines.forEach({ it: string ->
        val label = it.replaceAll("[=-].*", "")
        val hashCode = hash(label)
        if (hashCode == boxNum) {
            if (it.contains("=")) {
                val index = (box as ArrayList).find({ entry: string -> entry.startsWith(label) })
                if (index != -1) {
                    box.remove(index)
                    box.add(index, it)
                } else {
                    box.add(it)
                }
            } else {
                val index = (box as ArrayList).find({ entry: string -> entry.startsWith(label) })
                if (index != -1) {
                    box.remove(index)
                }
            }
        }
    })

    var result = 0
    var slot = 1
    box.forEach({ it:string -> 
        val value = (boxNum+1) * slot * (it.split("=")[1] as int)
        result += value
        slot += 1
    })
    result
}


fn part2(lines: array[string]): int {
    var i = 0
    var sum = 0
    while (i < 256) {
        sum += lines.calcForBox(i)
        i += 1
    }
    sum
}

println("Part 2 (test): ${part2(tlines)}")
println("Part 2 (prod): ${part2(plines)}")
0