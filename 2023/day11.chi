import aoc/lib as lib { load, splitOnNewLines }
import std/string as str
import std/math as math
import std/collections.map as map { Map, newMap }
import std/collections.set as set { Set, newSet }
import std/collections.arraylist as list { ArrayList, newArrayList }
import std/lang.unsafe { array as unsafeArray }


val prod = load("input11.txt")
val test = load("test11.txt")

val plines = prod.splitOnNewLines()
val tlines = test.splitOnNewLines()

data Point(x:int, y:int)

fn encode(p: Point): int {
    p.x << 32 | p.y
}

fn decode(p: int): Point {
    val x = p >> 32
    val y = (p << 32) >> 32
    Point(x,y)
}

fn findGalaxies(lines: array[string]): ArrayList[Point] {
    val result = newArrayList[Point]()
    var y = 0
    while (y < lines.size()) {
        var x = 0
        while (x < lines[y].length()) {
            val ch = lines[y][x]
            if (ch == "#") {
                result.add(Point(x,y))
            }
            x += 1
        }
        y += 1
    }
    result
}


fn toSet(l: ArrayList[int]): Set[int] {
    val result = setOf[int]()
    l.forEach({ it:int -> result.add(it) })
    result
}

fn expandRight(galaxies: ArrayList[Point], startAt: int, scale: int) {
    val s = scale - 1 // multiply 1 by n so simply add n-1
    galaxies.forEach({ it:Point -> 
        if((it.x) > startAt) { 
            it.x = (it.x + s)
        }
    })
}

fn expandDown(galaxies: ArrayList[Point], startAt: int, scale: int) {
    val s = scale - 1 // multiply 1 by n so simply add n-1
    galaxies.forEach({it:Point -> 
        if((it.y) > startAt) { it.y = (it.y + s) }
    })
}

fn expand(galaxies: ArrayList[Point], scale: int) {
    val colsWithGalaxies = galaxies.map({ it:Point -> it.x }).toSet()
    val rowsWithGalaxies = galaxies.map({ it:Point -> it.y }).toSet()

    var width = 0
    var height = 0
    galaxies.forEach({it:Point -> 
        width = math.max(width, it.x)
        height = math.max(height, it.y)
    })

    var y = height - 1
    while (y >= 0) {
        if (!rowsWithGalaxies.contains(y)) {
            galaxies.expandDown(y, scale)
        }
        y -= 1
    }

    var x = width - 1
    while (x >= 0) {
        if (!colsWithGalaxies.contains(x)) {
            galaxies.expandRight(x, scale)
        }
        x -= 1
    }
}

fn pairs(galaxies: ArrayList[Point]): ArrayList[Pair[Point, Point]] {
    val result = newArrayList[Pair[Point,Point]]()
    var i = 0
    while(i < galaxies.size()) {
        var j = i+1
        while(j < galaxies.size()) {
            val a = galaxies.get(i).unwrap()
            val b = galaxies.get(j).unwrap()
            result.add(Pair(a,b))
            j += 1
        }
        i += 1
    }
    result
}

fn dist(pair: Pair[Point, Point]): int {
    val a = pair.left
    val b = pair.right
    math.abs((a.x) - (b.x)) + math.abs((a.y) - (b.y))
}

fn part1(lines: array[string]): int { 
    val gs = lines.findGalaxies()
    gs.expand(2)
    gs.pairs().map({p: Pair[Point,Point] -> 
        p.dist()
    }).sum()
}

println("Part 1 (test): ${part1(tlines)}")
println("Part 1 (prod): ${part1(plines)}")

fn part2(lines: array[string]): int { 
    val gs = lines.findGalaxies()
    gs.expand(1000000)
    gs.pairs().map({p: Pair[Point,Point] -> 
        p.dist()
    }).sum()
}

println("Part 2 (test): ${part2(tlines)}")
println("Part 2 (prod): ${part2(plines)}")